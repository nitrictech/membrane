// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.4
// source: nitric/proto/schedules/v1/schedules.proto

package schedulespb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// globally unique ID of the request/response pair
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Content:
	//
	//	*ClientMessage_RegistrationRequest
	//	*ClientMessage_IntervalResponse
	Content isClientMessage_Content `protobuf_oneof:"content"`
}

func (x *ClientMessage) Reset() {
	*x = ClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_schedules_v1_schedules_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMessage) ProtoMessage() {}

func (x *ClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_schedules_v1_schedules_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMessage.ProtoReflect.Descriptor instead.
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return file_nitric_proto_schedules_v1_schedules_proto_rawDescGZIP(), []int{0}
}

func (x *ClientMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *ClientMessage) GetContent() isClientMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *ClientMessage) GetRegistrationRequest() *RegistrationRequest {
	if x, ok := x.GetContent().(*ClientMessage_RegistrationRequest); ok {
		return x.RegistrationRequest
	}
	return nil
}

func (x *ClientMessage) GetIntervalResponse() *IntervalResponse {
	if x, ok := x.GetContent().(*ClientMessage_IntervalResponse); ok {
		return x.IntervalResponse
	}
	return nil
}

type isClientMessage_Content interface {
	isClientMessage_Content()
}

type ClientMessage_RegistrationRequest struct {
	// Register a subscription to a schedule
	RegistrationRequest *RegistrationRequest `protobuf:"bytes,2,opt,name=registration_request,json=registrationRequest,proto3,oneof"`
}

type ClientMessage_IntervalResponse struct {
	// Response to a schedule interval
	IntervalResponse *IntervalResponse `protobuf:"bytes,3,opt,name=interval_response,json=intervalResponse,proto3,oneof"`
}

func (*ClientMessage_RegistrationRequest) isClientMessage_Content() {}

func (*ClientMessage_IntervalResponse) isClientMessage_Content() {}

type IntervalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleName string `protobuf:"bytes,1,opt,name=schedule_name,json=scheduleName,proto3" json:"schedule_name,omitempty"`
}

func (x *IntervalRequest) Reset() {
	*x = IntervalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_schedules_v1_schedules_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalRequest) ProtoMessage() {}

func (x *IntervalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_schedules_v1_schedules_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalRequest.ProtoReflect.Descriptor instead.
func (*IntervalRequest) Descriptor() ([]byte, []int) {
	return file_nitric_proto_schedules_v1_schedules_proto_rawDescGZIP(), []int{1}
}

func (x *IntervalRequest) GetScheduleName() string {
	if x != nil {
		return x.ScheduleName
	}
	return ""
}

type ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// globally unique ID of the request/response pair
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Content:
	//
	//	*ServerMessage_RegistrationResponse
	//	*ServerMessage_IntervalRequest
	Content isServerMessage_Content `protobuf_oneof:"content"`
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_schedules_v1_schedules_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_schedules_v1_schedules_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_nitric_proto_schedules_v1_schedules_proto_rawDescGZIP(), []int{2}
}

func (x *ServerMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *ServerMessage) GetContent() isServerMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *ServerMessage) GetRegistrationResponse() *RegistrationResponse {
	if x, ok := x.GetContent().(*ServerMessage_RegistrationResponse); ok {
		return x.RegistrationResponse
	}
	return nil
}

func (x *ServerMessage) GetIntervalRequest() *IntervalRequest {
	if x, ok := x.GetContent().(*ServerMessage_IntervalRequest); ok {
		return x.IntervalRequest
	}
	return nil
}

type isServerMessage_Content interface {
	isServerMessage_Content()
}

type ServerMessage_RegistrationResponse struct {
	// Response to a schedule subscription request
	RegistrationResponse *RegistrationResponse `protobuf:"bytes,2,opt,name=registration_response,json=registrationResponse,proto3,oneof"`
}

type ServerMessage_IntervalRequest struct {
	// A schedule interval trigger request
	IntervalRequest *IntervalRequest `protobuf:"bytes,3,opt,name=interval_request,json=intervalRequest,proto3,oneof"`
}

func (*ServerMessage_RegistrationResponse) isServerMessage_Content() {}

func (*ServerMessage_IntervalRequest) isServerMessage_Content() {}

type RegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleName string `protobuf:"bytes,1,opt,name=schedule_name,json=scheduleName,proto3" json:"schedule_name,omitempty"`
	// Types that are assignable to Cadence:
	//
	//	*RegistrationRequest_Every
	//	*RegistrationRequest_Cron
	Cadence isRegistrationRequest_Cadence `protobuf_oneof:"cadence"`
}

func (x *RegistrationRequest) Reset() {
	*x = RegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_schedules_v1_schedules_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationRequest) ProtoMessage() {}

func (x *RegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_schedules_v1_schedules_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationRequest.ProtoReflect.Descriptor instead.
func (*RegistrationRequest) Descriptor() ([]byte, []int) {
	return file_nitric_proto_schedules_v1_schedules_proto_rawDescGZIP(), []int{3}
}

func (x *RegistrationRequest) GetScheduleName() string {
	if x != nil {
		return x.ScheduleName
	}
	return ""
}

func (m *RegistrationRequest) GetCadence() isRegistrationRequest_Cadence {
	if m != nil {
		return m.Cadence
	}
	return nil
}

func (x *RegistrationRequest) GetEvery() *ScheduleEvery {
	if x, ok := x.GetCadence().(*RegistrationRequest_Every); ok {
		return x.Every
	}
	return nil
}

func (x *RegistrationRequest) GetCron() *ScheduleCron {
	if x, ok := x.GetCadence().(*RegistrationRequest_Cron); ok {
		return x.Cron
	}
	return nil
}

type isRegistrationRequest_Cadence interface {
	isRegistrationRequest_Cadence()
}

type RegistrationRequest_Every struct {
	Every *ScheduleEvery `protobuf:"bytes,10,opt,name=every,proto3,oneof"`
}

type RegistrationRequest_Cron struct {
	Cron *ScheduleCron `protobuf:"bytes,11,opt,name=cron,proto3,oneof"`
}

func (*RegistrationRequest_Every) isRegistrationRequest_Cadence() {}

func (*RegistrationRequest_Cron) isRegistrationRequest_Cadence() {}

type ScheduleEvery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate string `protobuf:"bytes,1,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *ScheduleEvery) Reset() {
	*x = ScheduleEvery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_schedules_v1_schedules_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleEvery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleEvery) ProtoMessage() {}

func (x *ScheduleEvery) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_schedules_v1_schedules_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleEvery.ProtoReflect.Descriptor instead.
func (*ScheduleEvery) Descriptor() ([]byte, []int) {
	return file_nitric_proto_schedules_v1_schedules_proto_rawDescGZIP(), []int{4}
}

func (x *ScheduleEvery) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

type ScheduleCron struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression string `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *ScheduleCron) Reset() {
	*x = ScheduleCron{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_schedules_v1_schedules_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleCron) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleCron) ProtoMessage() {}

func (x *ScheduleCron) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_schedules_v1_schedules_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleCron.ProtoReflect.Descriptor instead.
func (*ScheduleCron) Descriptor() ([]byte, []int) {
	return file_nitric_proto_schedules_v1_schedules_proto_rawDescGZIP(), []int{5}
}

func (x *ScheduleCron) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type RegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegistrationResponse) Reset() {
	*x = RegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_schedules_v1_schedules_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationResponse) ProtoMessage() {}

func (x *RegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_schedules_v1_schedules_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationResponse.ProtoReflect.Descriptor instead.
func (*RegistrationResponse) Descriptor() ([]byte, []int) {
	return file_nitric_proto_schedules_v1_schedules_proto_rawDescGZIP(), []int{6}
}

type IntervalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IntervalResponse) Reset() {
	*x = IntervalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_schedules_v1_schedules_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalResponse) ProtoMessage() {}

func (x *IntervalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_schedules_v1_schedules_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalResponse.ProtoReflect.Descriptor instead.
func (*IntervalResponse) Descriptor() ([]byte, []int) {
	return file_nitric_proto_schedules_v1_schedules_proto_rawDescGZIP(), []int{7}
}

var File_nitric_proto_schedules_v1_schedules_proto protoreflect.FileDescriptor

var file_nitric_proto_schedules_v1_schedules_proto_rawDesc = []byte{
	0x0a, 0x29, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x6e, 0x69, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x22, 0xeb, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x63, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a,
	0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x36, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xeb, 0x01, 0x0a,
	0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x66,
	0x0a, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x13, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x72, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x76, 0x65, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x04, 0x63, 0x72, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x61, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0x23, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45,
	0x76, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x22, 0x2e, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x12, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x6f, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x62, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x2e,
	0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x28, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0xb0, 0x01, 0x0a, 0x1c, 0x69, 0x6f, 0x2e, 0x6e, 0x69, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x63,
	0x68, 0x2f, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x70, 0x62,
	0xaa, 0x02, 0x19, 0x4e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0xca, 0x02, 0x19, 0x4e,
	0x69, 0x74, 0x72, 0x69, 0x63, 0x5c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nitric_proto_schedules_v1_schedules_proto_rawDescOnce sync.Once
	file_nitric_proto_schedules_v1_schedules_proto_rawDescData = file_nitric_proto_schedules_v1_schedules_proto_rawDesc
)

func file_nitric_proto_schedules_v1_schedules_proto_rawDescGZIP() []byte {
	file_nitric_proto_schedules_v1_schedules_proto_rawDescOnce.Do(func() {
		file_nitric_proto_schedules_v1_schedules_proto_rawDescData = protoimpl.X.CompressGZIP(file_nitric_proto_schedules_v1_schedules_proto_rawDescData)
	})
	return file_nitric_proto_schedules_v1_schedules_proto_rawDescData
}

var file_nitric_proto_schedules_v1_schedules_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_nitric_proto_schedules_v1_schedules_proto_goTypes = []interface{}{
	(*ClientMessage)(nil),        // 0: nitric.proto.schedules.v1.ClientMessage
	(*IntervalRequest)(nil),      // 1: nitric.proto.schedules.v1.IntervalRequest
	(*ServerMessage)(nil),        // 2: nitric.proto.schedules.v1.ServerMessage
	(*RegistrationRequest)(nil),  // 3: nitric.proto.schedules.v1.RegistrationRequest
	(*ScheduleEvery)(nil),        // 4: nitric.proto.schedules.v1.ScheduleEvery
	(*ScheduleCron)(nil),         // 5: nitric.proto.schedules.v1.ScheduleCron
	(*RegistrationResponse)(nil), // 6: nitric.proto.schedules.v1.RegistrationResponse
	(*IntervalResponse)(nil),     // 7: nitric.proto.schedules.v1.IntervalResponse
}
var file_nitric_proto_schedules_v1_schedules_proto_depIdxs = []int32{
	3, // 0: nitric.proto.schedules.v1.ClientMessage.registration_request:type_name -> nitric.proto.schedules.v1.RegistrationRequest
	7, // 1: nitric.proto.schedules.v1.ClientMessage.interval_response:type_name -> nitric.proto.schedules.v1.IntervalResponse
	6, // 2: nitric.proto.schedules.v1.ServerMessage.registration_response:type_name -> nitric.proto.schedules.v1.RegistrationResponse
	1, // 3: nitric.proto.schedules.v1.ServerMessage.interval_request:type_name -> nitric.proto.schedules.v1.IntervalRequest
	4, // 4: nitric.proto.schedules.v1.RegistrationRequest.every:type_name -> nitric.proto.schedules.v1.ScheduleEvery
	5, // 5: nitric.proto.schedules.v1.RegistrationRequest.cron:type_name -> nitric.proto.schedules.v1.ScheduleCron
	0, // 6: nitric.proto.schedules.v1.Schedules.Schedule:input_type -> nitric.proto.schedules.v1.ClientMessage
	2, // 7: nitric.proto.schedules.v1.Schedules.Schedule:output_type -> nitric.proto.schedules.v1.ServerMessage
	7, // [7:8] is the sub-list for method output_type
	6, // [6:7] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_nitric_proto_schedules_v1_schedules_proto_init() }
func file_nitric_proto_schedules_v1_schedules_proto_init() {
	if File_nitric_proto_schedules_v1_schedules_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nitric_proto_schedules_v1_schedules_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_schedules_v1_schedules_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_schedules_v1_schedules_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_schedules_v1_schedules_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_schedules_v1_schedules_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleEvery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_schedules_v1_schedules_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleCron); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_schedules_v1_schedules_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_schedules_v1_schedules_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nitric_proto_schedules_v1_schedules_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ClientMessage_RegistrationRequest)(nil),
		(*ClientMessage_IntervalResponse)(nil),
	}
	file_nitric_proto_schedules_v1_schedules_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ServerMessage_RegistrationResponse)(nil),
		(*ServerMessage_IntervalRequest)(nil),
	}
	file_nitric_proto_schedules_v1_schedules_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*RegistrationRequest_Every)(nil),
		(*RegistrationRequest_Cron)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nitric_proto_schedules_v1_schedules_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nitric_proto_schedules_v1_schedules_proto_goTypes,
		DependencyIndexes: file_nitric_proto_schedules_v1_schedules_proto_depIdxs,
		MessageInfos:      file_nitric_proto_schedules_v1_schedules_proto_msgTypes,
	}.Build()
	File_nitric_proto_schedules_v1_schedules_proto = out.File
	file_nitric_proto_schedules_v1_schedules_proto_rawDesc = nil
	file_nitric_proto_schedules_v1_schedules_proto_goTypes = nil
	file_nitric_proto_schedules_v1_schedules_proto_depIdxs = nil
}
