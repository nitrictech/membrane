// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: nitric/proto/batch/v1/batch.proto

package batchpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobClient is the client API for Job service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobClient interface {
	HandleJob(ctx context.Context, opts ...grpc.CallOption) (Job_HandleJobClient, error)
}

type jobClient struct {
	cc grpc.ClientConnInterface
}

func NewJobClient(cc grpc.ClientConnInterface) JobClient {
	return &jobClient{cc}
}

func (c *jobClient) HandleJob(ctx context.Context, opts ...grpc.CallOption) (Job_HandleJobClient, error) {
	stream, err := c.cc.NewStream(ctx, &Job_ServiceDesc.Streams[0], "/nitric.proto.batch.v1.Job/HandleJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobHandleJobClient{stream}
	return x, nil
}

type Job_HandleJobClient interface {
	Send(*ClientMessage) error
	Recv() (*ServerMessage, error)
	grpc.ClientStream
}

type jobHandleJobClient struct {
	grpc.ClientStream
}

func (x *jobHandleJobClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jobHandleJobClient) Recv() (*ServerMessage, error) {
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobServer is the server API for Job service.
// All implementations should embed UnimplementedJobServer
// for forward compatibility
type JobServer interface {
	HandleJob(Job_HandleJobServer) error
}

// UnimplementedJobServer should be embedded to have forward compatible implementations.
type UnimplementedJobServer struct {
}

func (UnimplementedJobServer) HandleJob(Job_HandleJobServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleJob not implemented")
}

// UnsafeJobServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobServer will
// result in compilation errors.
type UnsafeJobServer interface {
	mustEmbedUnimplementedJobServer()
}

func RegisterJobServer(s grpc.ServiceRegistrar, srv JobServer) {
	s.RegisterService(&Job_ServiceDesc, srv)
}

func _Job_HandleJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JobServer).HandleJob(&jobHandleJobServer{stream})
}

type Job_HandleJobServer interface {
	Send(*ServerMessage) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type jobHandleJobServer struct {
	grpc.ServerStream
}

func (x *jobHandleJobServer) Send(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jobHandleJobServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Job_ServiceDesc is the grpc.ServiceDesc for Job service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Job_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nitric.proto.batch.v1.Job",
	HandlerType: (*JobServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HandleJob",
			Handler:       _Job_HandleJob_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "nitric/proto/batch/v1/batch.proto",
}

// BatchClient is the client API for Batch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BatchClient interface {
	SubmitJob(ctx context.Context, in *JobSubmitRequest, opts ...grpc.CallOption) (*JobSubmitResponse, error)
}

type batchClient struct {
	cc grpc.ClientConnInterface
}

func NewBatchClient(cc grpc.ClientConnInterface) BatchClient {
	return &batchClient{cc}
}

func (c *batchClient) SubmitJob(ctx context.Context, in *JobSubmitRequest, opts ...grpc.CallOption) (*JobSubmitResponse, error) {
	out := new(JobSubmitResponse)
	err := c.cc.Invoke(ctx, "/nitric.proto.batch.v1.Batch/SubmitJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BatchServer is the server API for Batch service.
// All implementations should embed UnimplementedBatchServer
// for forward compatibility
type BatchServer interface {
	SubmitJob(context.Context, *JobSubmitRequest) (*JobSubmitResponse, error)
}

// UnimplementedBatchServer should be embedded to have forward compatible implementations.
type UnimplementedBatchServer struct {
}

func (UnimplementedBatchServer) SubmitJob(context.Context, *JobSubmitRequest) (*JobSubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitJob not implemented")
}

// UnsafeBatchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatchServer will
// result in compilation errors.
type UnsafeBatchServer interface {
	mustEmbedUnimplementedBatchServer()
}

func RegisterBatchServer(s grpc.ServiceRegistrar, srv BatchServer) {
	s.RegisterService(&Batch_ServiceDesc, srv)
}

func _Batch_SubmitJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).SubmitJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitric.proto.batch.v1.Batch/SubmitJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).SubmitJob(ctx, req.(*JobSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Batch_ServiceDesc is the grpc.ServiceDesc for Batch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Batch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nitric.proto.batch.v1.Batch",
	HandlerType: (*BatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitJob",
			Handler:    _Batch_SubmitJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nitric/proto/batch/v1/batch.proto",
}
