// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: nitric/proto/http/v1/http.proto

package httppb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HttpClient is the client API for Http service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HttpClient interface {
	// Serve a route on an API Gateway
	Proxy(ctx context.Context, opts ...grpc.CallOption) (Http_ProxyClient, error)
}

type httpClient struct {
	cc grpc.ClientConnInterface
}

func NewHttpClient(cc grpc.ClientConnInterface) HttpClient {
	return &httpClient{cc}
}

func (c *httpClient) Proxy(ctx context.Context, opts ...grpc.CallOption) (Http_ProxyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Http_ServiceDesc.Streams[0], "/nitric.proto.http.v1.Http/Proxy", opts...)
	if err != nil {
		return nil, err
	}
	x := &httpProxyClient{stream}
	return x, nil
}

type Http_ProxyClient interface {
	Send(*ClientMessage) error
	Recv() (*ServerMessage, error)
	grpc.ClientStream
}

type httpProxyClient struct {
	grpc.ClientStream
}

func (x *httpProxyClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *httpProxyClient) Recv() (*ServerMessage, error) {
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HttpServer is the server API for Http service.
// All implementations should embed UnimplementedHttpServer
// for forward compatibility
type HttpServer interface {
	// Serve a route on an API Gateway
	Proxy(Http_ProxyServer) error
}

// UnimplementedHttpServer should be embedded to have forward compatible implementations.
type UnimplementedHttpServer struct {
}

func (UnimplementedHttpServer) Proxy(Http_ProxyServer) error {
	return status.Errorf(codes.Unimplemented, "method Proxy not implemented")
}

// UnsafeHttpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HttpServer will
// result in compilation errors.
type UnsafeHttpServer interface {
	mustEmbedUnimplementedHttpServer()
}

func RegisterHttpServer(s grpc.ServiceRegistrar, srv HttpServer) {
	s.RegisterService(&Http_ServiceDesc, srv)
}

func _Http_Proxy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HttpServer).Proxy(&httpProxyServer{stream})
}

type Http_ProxyServer interface {
	Send(*ServerMessage) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type httpProxyServer struct {
	grpc.ServerStream
}

func (x *httpProxyServer) Send(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *httpProxyServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Http_ServiceDesc is the grpc.ServiceDesc for Http service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Http_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nitric.proto.http.v1.Http",
	HandlerType: (*HttpServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Proxy",
			Handler:       _Http_Proxy_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "nitric/proto/http/v1/http.proto",
}
