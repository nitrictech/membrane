// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.4
// source: nitric/proto/queues/v1/queues.proto

package queuespb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueueEnqueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Nitric name for the queue
	// this will automatically be resolved to the provider specific queue identifier.
	QueueName string `protobuf:"bytes,1,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
	// Array of messages to push to the queue
	Messages []*QueueMessage `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *QueueEnqueueRequest) Reset() {
	*x = QueueEnqueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_queues_v1_queues_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueEnqueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueEnqueueRequest) ProtoMessage() {}

func (x *QueueEnqueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_queues_v1_queues_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueEnqueueRequest.ProtoReflect.Descriptor instead.
func (*QueueEnqueueRequest) Descriptor() ([]byte, []int) {
	return file_nitric_proto_queues_v1_queues_proto_rawDescGZIP(), []int{0}
}

func (x *QueueEnqueueRequest) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *QueueEnqueueRequest) GetMessages() []*QueueMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

// Response for sending messages to a queue
type QueueEnqueueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of messages that failed to be queued
	FailedMessages []*FailedEnqueueMessage `protobuf:"bytes,1,rep,name=failed_messages,json=failedMessages,proto3" json:"failed_messages,omitempty"`
}

func (x *QueueEnqueueResponse) Reset() {
	*x = QueueEnqueueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_queues_v1_queues_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueEnqueueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueEnqueueResponse) ProtoMessage() {}

func (x *QueueEnqueueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_queues_v1_queues_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueEnqueueResponse.ProtoReflect.Descriptor instead.
func (*QueueEnqueueResponse) Descriptor() ([]byte, []int) {
	return file_nitric_proto_queues_v1_queues_proto_rawDescGZIP(), []int{1}
}

func (x *QueueEnqueueResponse) GetFailedMessages() []*FailedEnqueueMessage {
	if x != nil {
		return x.FailedMessages
	}
	return nil
}

type QueueDequeueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nitric name for the queue
	// this will automatically be resolved to the provider specific queue identifier.
	QueueName string `protobuf:"bytes,1,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
	// The max number of messages to pop off the queue, may be capped by provider specific limitations
	Depth int32 `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`
}

func (x *QueueDequeueRequest) Reset() {
	*x = QueueDequeueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_queues_v1_queues_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueDequeueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueDequeueRequest) ProtoMessage() {}

func (x *QueueDequeueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_queues_v1_queues_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueDequeueRequest.ProtoReflect.Descriptor instead.
func (*QueueDequeueRequest) Descriptor() ([]byte, []int) {
	return file_nitric_proto_queues_v1_queues_proto_rawDescGZIP(), []int{2}
}

func (x *QueueDequeueRequest) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *QueueDequeueRequest) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

type QueueDequeueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of messages popped off the queue
	Messages []*DequeuedMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *QueueDequeueResponse) Reset() {
	*x = QueueDequeueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_queues_v1_queues_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueDequeueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueDequeueResponse) ProtoMessage() {}

func (x *QueueDequeueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_queues_v1_queues_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueDequeueResponse.ProtoReflect.Descriptor instead.
func (*QueueDequeueResponse) Descriptor() ([]byte, []int) {
	return file_nitric_proto_queues_v1_queues_proto_rawDescGZIP(), []int{3}
}

func (x *QueueDequeueResponse) GetMessages() []*DequeuedMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type QueueCompleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nitric name for the queue
	//
	//	this will automatically be resolved to the provider specific queue identifier.
	QueueName string `protobuf:"bytes,1,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
	// Lease id of the message to be completed
	LeaseId string `protobuf:"bytes,2,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
}

func (x *QueueCompleteRequest) Reset() {
	*x = QueueCompleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_queues_v1_queues_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueCompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueCompleteRequest) ProtoMessage() {}

func (x *QueueCompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_queues_v1_queues_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueCompleteRequest.ProtoReflect.Descriptor instead.
func (*QueueCompleteRequest) Descriptor() ([]byte, []int) {
	return file_nitric_proto_queues_v1_queues_proto_rawDescGZIP(), []int{4}
}

func (x *QueueCompleteRequest) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *QueueCompleteRequest) GetLeaseId() string {
	if x != nil {
		return x.LeaseId
	}
	return ""
}

type QueueCompleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueueCompleteResponse) Reset() {
	*x = QueueCompleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_queues_v1_queues_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueCompleteResponse) ProtoMessage() {}

func (x *QueueCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_queues_v1_queues_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueCompleteResponse.ProtoReflect.Descriptor instead.
func (*QueueCompleteResponse) Descriptor() ([]byte, []int) {
	return file_nitric_proto_queues_v1_queues_proto_rawDescGZIP(), []int{5}
}

// An message to be sent to a queue.
type QueueMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The queue message contents
	//
	// Types that are assignable to Content:
	//
	//	*QueueMessage_StructPayload
	Content isQueueMessage_Content `protobuf_oneof:"content"`
}

func (x *QueueMessage) Reset() {
	*x = QueueMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_queues_v1_queues_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueMessage) ProtoMessage() {}

func (x *QueueMessage) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_queues_v1_queues_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueMessage.ProtoReflect.Descriptor instead.
func (*QueueMessage) Descriptor() ([]byte, []int) {
	return file_nitric_proto_queues_v1_queues_proto_rawDescGZIP(), []int{6}
}

func (m *QueueMessage) GetContent() isQueueMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *QueueMessage) GetStructPayload() *structpb.Struct {
	if x, ok := x.GetContent().(*QueueMessage_StructPayload); ok {
		return x.StructPayload
	}
	return nil
}

type isQueueMessage_Content interface {
	isQueueMessage_Content()
}

type QueueMessage_StructPayload struct {
	StructPayload *structpb.Struct `protobuf:"bytes,1,opt,name=struct_payload,json=structPayload,proto3,oneof"`
}

func (*QueueMessage_StructPayload) isQueueMessage_Content() {}

type DequeuedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaseId string        `protobuf:"bytes,1,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
	Message *QueueMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DequeuedMessage) Reset() {
	*x = DequeuedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_queues_v1_queues_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeuedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeuedMessage) ProtoMessage() {}

func (x *DequeuedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_queues_v1_queues_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeuedMessage.ProtoReflect.Descriptor instead.
func (*DequeuedMessage) Descriptor() ([]byte, []int) {
	return file_nitric_proto_queues_v1_queues_proto_rawDescGZIP(), []int{7}
}

func (x *DequeuedMessage) GetLeaseId() string {
	if x != nil {
		return x.LeaseId
	}
	return ""
}

func (x *DequeuedMessage) GetMessage() *QueueMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type FailedEnqueueMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The message that failed to be pushed
	Message *QueueMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// A description of the failure
	Details string `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *FailedEnqueueMessage) Reset() {
	*x = FailedEnqueueMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_queues_v1_queues_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailedEnqueueMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailedEnqueueMessage) ProtoMessage() {}

func (x *FailedEnqueueMessage) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_queues_v1_queues_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailedEnqueueMessage.ProtoReflect.Descriptor instead.
func (*FailedEnqueueMessage) Descriptor() ([]byte, []int) {
	return file_nitric_proto_queues_v1_queues_proto_rawDescGZIP(), []int{8}
}

func (x *FailedEnqueueMessage) GetMessage() *QueueMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *FailedEnqueueMessage) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

var File_nitric_proto_queues_v1_queues_proto protoreflect.FileDescriptor

var file_nitric_proto_queues_v1_queues_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x76, 0x0a, 0x13, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x22, 0x6d, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x22, 0x4a, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x22, 0x5b,
	0x0a, 0x14, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x14, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x22, 0x17, 0x0a,
	0x15, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x0f, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x70, 0x0a, 0x14, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x69, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x32, 0xbd, 0x02, 0x0a, 0x06, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x64,
	0x0a, 0x07, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2b, 0x2e, 0x6e, 0x69, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x07, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x2b, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e,
	0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x08, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x9e, 0x01, 0x0a, 0x19, 0x69, 0x6f, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x42, 0x0d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e,
	0x69, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x70, 0x62, 0xaa, 0x02, 0x16, 0x4e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31, 0xca, 0x02, 0x16, 0x4e, 0x69,
	0x74, 0x72, 0x69, 0x63, 0x5c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x5c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nitric_proto_queues_v1_queues_proto_rawDescOnce sync.Once
	file_nitric_proto_queues_v1_queues_proto_rawDescData = file_nitric_proto_queues_v1_queues_proto_rawDesc
)

func file_nitric_proto_queues_v1_queues_proto_rawDescGZIP() []byte {
	file_nitric_proto_queues_v1_queues_proto_rawDescOnce.Do(func() {
		file_nitric_proto_queues_v1_queues_proto_rawDescData = protoimpl.X.CompressGZIP(file_nitric_proto_queues_v1_queues_proto_rawDescData)
	})
	return file_nitric_proto_queues_v1_queues_proto_rawDescData
}

var file_nitric_proto_queues_v1_queues_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_nitric_proto_queues_v1_queues_proto_goTypes = []interface{}{
	(*QueueEnqueueRequest)(nil),   // 0: nitric.proto.queues.v1.QueueEnqueueRequest
	(*QueueEnqueueResponse)(nil),  // 1: nitric.proto.queues.v1.QueueEnqueueResponse
	(*QueueDequeueRequest)(nil),   // 2: nitric.proto.queues.v1.QueueDequeueRequest
	(*QueueDequeueResponse)(nil),  // 3: nitric.proto.queues.v1.QueueDequeueResponse
	(*QueueCompleteRequest)(nil),  // 4: nitric.proto.queues.v1.QueueCompleteRequest
	(*QueueCompleteResponse)(nil), // 5: nitric.proto.queues.v1.QueueCompleteResponse
	(*QueueMessage)(nil),          // 6: nitric.proto.queues.v1.QueueMessage
	(*DequeuedMessage)(nil),       // 7: nitric.proto.queues.v1.DequeuedMessage
	(*FailedEnqueueMessage)(nil),  // 8: nitric.proto.queues.v1.FailedEnqueueMessage
	(*structpb.Struct)(nil),       // 9: google.protobuf.Struct
}
var file_nitric_proto_queues_v1_queues_proto_depIdxs = []int32{
	6, // 0: nitric.proto.queues.v1.QueueEnqueueRequest.messages:type_name -> nitric.proto.queues.v1.QueueMessage
	8, // 1: nitric.proto.queues.v1.QueueEnqueueResponse.failed_messages:type_name -> nitric.proto.queues.v1.FailedEnqueueMessage
	7, // 2: nitric.proto.queues.v1.QueueDequeueResponse.messages:type_name -> nitric.proto.queues.v1.DequeuedMessage
	9, // 3: nitric.proto.queues.v1.QueueMessage.struct_payload:type_name -> google.protobuf.Struct
	6, // 4: nitric.proto.queues.v1.DequeuedMessage.message:type_name -> nitric.proto.queues.v1.QueueMessage
	6, // 5: nitric.proto.queues.v1.FailedEnqueueMessage.message:type_name -> nitric.proto.queues.v1.QueueMessage
	0, // 6: nitric.proto.queues.v1.Queues.Enqueue:input_type -> nitric.proto.queues.v1.QueueEnqueueRequest
	2, // 7: nitric.proto.queues.v1.Queues.Dequeue:input_type -> nitric.proto.queues.v1.QueueDequeueRequest
	4, // 8: nitric.proto.queues.v1.Queues.Complete:input_type -> nitric.proto.queues.v1.QueueCompleteRequest
	1, // 9: nitric.proto.queues.v1.Queues.Enqueue:output_type -> nitric.proto.queues.v1.QueueEnqueueResponse
	3, // 10: nitric.proto.queues.v1.Queues.Dequeue:output_type -> nitric.proto.queues.v1.QueueDequeueResponse
	5, // 11: nitric.proto.queues.v1.Queues.Complete:output_type -> nitric.proto.queues.v1.QueueCompleteResponse
	9, // [9:12] is the sub-list for method output_type
	6, // [6:9] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_nitric_proto_queues_v1_queues_proto_init() }
func file_nitric_proto_queues_v1_queues_proto_init() {
	if File_nitric_proto_queues_v1_queues_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nitric_proto_queues_v1_queues_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueEnqueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_queues_v1_queues_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueEnqueueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_queues_v1_queues_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueDequeueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_queues_v1_queues_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueDequeueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_queues_v1_queues_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueCompleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_queues_v1_queues_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueCompleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_queues_v1_queues_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_queues_v1_queues_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeuedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_queues_v1_queues_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailedEnqueueMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nitric_proto_queues_v1_queues_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*QueueMessage_StructPayload)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nitric_proto_queues_v1_queues_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nitric_proto_queues_v1_queues_proto_goTypes,
		DependencyIndexes: file_nitric_proto_queues_v1_queues_proto_depIdxs,
		MessageInfos:      file_nitric_proto_queues_v1_queues_proto_msgTypes,
	}.Build()
	File_nitric_proto_queues_v1_queues_proto = out.File
	file_nitric_proto_queues_v1_queues_proto_rawDesc = nil
	file_nitric_proto_queues_v1_queues_proto_goTypes = nil
	file_nitric_proto_queues_v1_queues_proto_depIdxs = nil
}
