// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: nitric/proto/kvstore/v1/kvstore.proto

package kvstorepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KvStoreClient is the client API for KvStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KvStoreClient interface {
	// Get an existing value
	GetValue(ctx context.Context, in *KvStoreGetValueRequest, opts ...grpc.CallOption) (*KvStoreGetValueResponse, error)
	// Create a new or overwrite an existing value
	SetValue(ctx context.Context, in *KvStoreSetValueRequest, opts ...grpc.CallOption) (*KvStoreSetValueResponse, error)
	// Delete a key and its value
	DeleteKey(ctx context.Context, in *KvStoreDeleteKeyRequest, opts ...grpc.CallOption) (*KvStoreDeleteKeyResponse, error)
	// Iterate over all keys in a store
	ScanKeys(ctx context.Context, in *KvStoreScanKeysRequest, opts ...grpc.CallOption) (KvStore_ScanKeysClient, error)
}

type kvStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewKvStoreClient(cc grpc.ClientConnInterface) KvStoreClient {
	return &kvStoreClient{cc}
}

func (c *kvStoreClient) GetValue(ctx context.Context, in *KvStoreGetValueRequest, opts ...grpc.CallOption) (*KvStoreGetValueResponse, error) {
	out := new(KvStoreGetValueResponse)
	err := c.cc.Invoke(ctx, "/nitric.proto.kvstore.v1.KvStore/GetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvStoreClient) SetValue(ctx context.Context, in *KvStoreSetValueRequest, opts ...grpc.CallOption) (*KvStoreSetValueResponse, error) {
	out := new(KvStoreSetValueResponse)
	err := c.cc.Invoke(ctx, "/nitric.proto.kvstore.v1.KvStore/SetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvStoreClient) DeleteKey(ctx context.Context, in *KvStoreDeleteKeyRequest, opts ...grpc.CallOption) (*KvStoreDeleteKeyResponse, error) {
	out := new(KvStoreDeleteKeyResponse)
	err := c.cc.Invoke(ctx, "/nitric.proto.kvstore.v1.KvStore/DeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvStoreClient) ScanKeys(ctx context.Context, in *KvStoreScanKeysRequest, opts ...grpc.CallOption) (KvStore_ScanKeysClient, error) {
	stream, err := c.cc.NewStream(ctx, &KvStore_ServiceDesc.Streams[0], "/nitric.proto.kvstore.v1.KvStore/ScanKeys", opts...)
	if err != nil {
		return nil, err
	}
	x := &kvStoreScanKeysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KvStore_ScanKeysClient interface {
	Recv() (*KvStoreScanKeysResponse, error)
	grpc.ClientStream
}

type kvStoreScanKeysClient struct {
	grpc.ClientStream
}

func (x *kvStoreScanKeysClient) Recv() (*KvStoreScanKeysResponse, error) {
	m := new(KvStoreScanKeysResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KvStoreServer is the server API for KvStore service.
// All implementations should embed UnimplementedKvStoreServer
// for forward compatibility
type KvStoreServer interface {
	// Get an existing value
	GetValue(context.Context, *KvStoreGetValueRequest) (*KvStoreGetValueResponse, error)
	// Create a new or overwrite an existing value
	SetValue(context.Context, *KvStoreSetValueRequest) (*KvStoreSetValueResponse, error)
	// Delete a key and its value
	DeleteKey(context.Context, *KvStoreDeleteKeyRequest) (*KvStoreDeleteKeyResponse, error)
	// Iterate over all keys in a store
	ScanKeys(*KvStoreScanKeysRequest, KvStore_ScanKeysServer) error
}

// UnimplementedKvStoreServer should be embedded to have forward compatible implementations.
type UnimplementedKvStoreServer struct {
}

func (UnimplementedKvStoreServer) GetValue(context.Context, *KvStoreGetValueRequest) (*KvStoreGetValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedKvStoreServer) SetValue(context.Context, *KvStoreSetValueRequest) (*KvStoreSetValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValue not implemented")
}
func (UnimplementedKvStoreServer) DeleteKey(context.Context, *KvStoreDeleteKeyRequest) (*KvStoreDeleteKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (UnimplementedKvStoreServer) ScanKeys(*KvStoreScanKeysRequest, KvStore_ScanKeysServer) error {
	return status.Errorf(codes.Unimplemented, "method ScanKeys not implemented")
}

// UnsafeKvStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KvStoreServer will
// result in compilation errors.
type UnsafeKvStoreServer interface {
	mustEmbedUnimplementedKvStoreServer()
}

func RegisterKvStoreServer(s grpc.ServiceRegistrar, srv KvStoreServer) {
	s.RegisterService(&KvStore_ServiceDesc, srv)
}

func _KvStore_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvStoreGetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvStoreServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitric.proto.kvstore.v1.KvStore/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvStoreServer).GetValue(ctx, req.(*KvStoreGetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvStore_SetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvStoreSetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvStoreServer).SetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitric.proto.kvstore.v1.KvStore/SetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvStoreServer).SetValue(ctx, req.(*KvStoreSetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvStore_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvStoreDeleteKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvStoreServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitric.proto.kvstore.v1.KvStore/DeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvStoreServer).DeleteKey(ctx, req.(*KvStoreDeleteKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvStore_ScanKeys_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(KvStoreScanKeysRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KvStoreServer).ScanKeys(m, &kvStoreScanKeysServer{stream})
}

type KvStore_ScanKeysServer interface {
	Send(*KvStoreScanKeysResponse) error
	grpc.ServerStream
}

type kvStoreScanKeysServer struct {
	grpc.ServerStream
}

func (x *kvStoreScanKeysServer) Send(m *KvStoreScanKeysResponse) error {
	return x.ServerStream.SendMsg(m)
}

// KvStore_ServiceDesc is the grpc.ServiceDesc for KvStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KvStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nitric.proto.kvstore.v1.KvStore",
	HandlerType: (*KvStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetValue",
			Handler:    _KvStore_GetValue_Handler,
		},
		{
			MethodName: "SetValue",
			Handler:    _KvStore_SetValue_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _KvStore_DeleteKey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ScanKeys",
			Handler:       _KvStore_ScanKeys_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nitric/proto/kvstore/v1/kvstore.proto",
}
