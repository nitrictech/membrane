// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/core/pkg/workers/storage (interfaces: BucketRequestHandler)

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storagepb "github.com/nitrictech/nitric/core/pkg/proto/storage/v1"
)

// MockBucketRequestHandler is a mock of BucketRequestHandler interface.
type MockBucketRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockBucketRequestHandlerMockRecorder
}

// MockBucketRequestHandlerMockRecorder is the mock recorder for MockBucketRequestHandler.
type MockBucketRequestHandlerMockRecorder struct {
	mock *MockBucketRequestHandler
}

// NewMockBucketRequestHandler creates a new mock instance.
func NewMockBucketRequestHandler(ctrl *gomock.Controller) *MockBucketRequestHandler {
	mock := &MockBucketRequestHandler{ctrl: ctrl}
	mock.recorder = &MockBucketRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucketRequestHandler) EXPECT() *MockBucketRequestHandlerMockRecorder {
	return m.recorder
}

// HandleRequest mocks base method.
func (m *MockBucketRequestHandler) HandleRequest(arg0 *storagepb.ServerMessage) (*storagepb.ClientMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRequest", arg0)
	ret0, _ := ret[0].(*storagepb.ClientMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRequest indicates an expected call of HandleRequest.
func (mr *MockBucketRequestHandlerMockRecorder) HandleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRequest", reflect.TypeOf((*MockBucketRequestHandler)(nil).HandleRequest), arg0)
}

// Listen mocks base method.
func (m *MockBucketRequestHandler) Listen(arg0 storagepb.StorageListener_ListenServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockBucketRequestHandlerMockRecorder) Listen(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockBucketRequestHandler)(nil).Listen), arg0)
}

// WorkerCount mocks base method.
func (m *MockBucketRequestHandler) WorkerCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// WorkerCount indicates an expected call of WorkerCount.
func (mr *MockBucketRequestHandlerMockRecorder) WorkerCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerCount", reflect.TypeOf((*MockBucketRequestHandler)(nil).WorkerCount))
}
