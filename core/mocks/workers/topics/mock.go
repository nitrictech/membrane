// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/core/pkg/workers/topics (interfaces: SubscriptionRequestHandler)

// Package mock_topics is a generated GoMock package.
package mock_topics

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	topicspb "github.com/nitrictech/nitric/core/pkg/proto/topics/v1"
)

// MockSubscriptionRequestHandler is a mock of SubscriptionRequestHandler interface.
type MockSubscriptionRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionRequestHandlerMockRecorder
}

// MockSubscriptionRequestHandlerMockRecorder is the mock recorder for MockSubscriptionRequestHandler.
type MockSubscriptionRequestHandlerMockRecorder struct {
	mock *MockSubscriptionRequestHandler
}

// NewMockSubscriptionRequestHandler creates a new mock instance.
func NewMockSubscriptionRequestHandler(ctrl *gomock.Controller) *MockSubscriptionRequestHandler {
	mock := &MockSubscriptionRequestHandler{ctrl: ctrl}
	mock.recorder = &MockSubscriptionRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionRequestHandler) EXPECT() *MockSubscriptionRequestHandlerMockRecorder {
	return m.recorder
}

// HandleRequest mocks base method.
func (m *MockSubscriptionRequestHandler) HandleRequest(arg0 *topicspb.ServerMessage) (*topicspb.ClientMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRequest", arg0)
	ret0, _ := ret[0].(*topicspb.ClientMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRequest indicates an expected call of HandleRequest.
func (mr *MockSubscriptionRequestHandlerMockRecorder) HandleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRequest", reflect.TypeOf((*MockSubscriptionRequestHandler)(nil).HandleRequest), arg0)
}

// Subscribe mocks base method.
func (m *MockSubscriptionRequestHandler) Subscribe(arg0 topicspb.Subscriber_SubscribeServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscriptionRequestHandlerMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscriptionRequestHandler)(nil).Subscribe), arg0)
}

// WorkerCount mocks base method.
func (m *MockSubscriptionRequestHandler) WorkerCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// WorkerCount indicates an expected call of WorkerCount.
func (mr *MockSubscriptionRequestHandlerMockRecorder) WorkerCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerCount", reflect.TypeOf((*MockSubscriptionRequestHandler)(nil).WorkerCount))
}
