// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/pkg/worker (interfaces: GrpcWorker)

// Package worker is a generated GoMock package.
package worker

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	triggers "github.com/nitrictech/nitric/pkg/triggers"
)

// MockGrpcWorker is a mock of GrpcWorker interface.
type MockGrpcWorker struct {
	ctrl     *gomock.Controller
	recorder *MockGrpcWorkerMockRecorder
}

// MockGrpcWorkerMockRecorder is the mock recorder for MockGrpcWorker.
type MockGrpcWorkerMockRecorder struct {
	mock *MockGrpcWorker
}

// NewMockGrpcWorker creates a new mock instance.
func NewMockGrpcWorker(ctrl *gomock.Controller) *MockGrpcWorker {
	mock := &MockGrpcWorker{ctrl: ctrl}
	mock.recorder = &MockGrpcWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGrpcWorker) EXPECT() *MockGrpcWorkerMockRecorder {
	return m.recorder
}

// HandleCloudEvent mocks base method.
func (m *MockGrpcWorker) HandleCloudEvent(arg0 *triggers.CloudEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCloudEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleCloudEvent indicates an expected call of HandleCloudEvent.
func (mr *MockGrpcWorkerMockRecorder) HandleCloudEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCloudEvent", reflect.TypeOf((*MockGrpcWorker)(nil).HandleCloudEvent), arg0)
}

// HandleEvent mocks base method.
func (m *MockGrpcWorker) HandleEvent(arg0 *triggers.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleEvent indicates an expected call of HandleEvent.
func (mr *MockGrpcWorkerMockRecorder) HandleEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvent", reflect.TypeOf((*MockGrpcWorker)(nil).HandleEvent), arg0)
}

// HandleHttpRequest mocks base method.
func (m *MockGrpcWorker) HandleHttpRequest(arg0 *triggers.HttpRequest) (*triggers.HttpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleHttpRequest", arg0)
	ret0, _ := ret[0].(*triggers.HttpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleHttpRequest indicates an expected call of HandleHttpRequest.
func (mr *MockGrpcWorkerMockRecorder) HandleHttpRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleHttpRequest", reflect.TypeOf((*MockGrpcWorker)(nil).HandleHttpRequest), arg0)
}

// HandlesCloudEvent mocks base method.
func (m *MockGrpcWorker) HandlesCloudEvent(arg0 *triggers.CloudEvent) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlesCloudEvent", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HandlesCloudEvent indicates an expected call of HandlesCloudEvent.
func (mr *MockGrpcWorkerMockRecorder) HandlesCloudEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlesCloudEvent", reflect.TypeOf((*MockGrpcWorker)(nil).HandlesCloudEvent), arg0)
}

// HandlesEvent mocks base method.
func (m *MockGrpcWorker) HandlesEvent(arg0 *triggers.Event) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlesEvent", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HandlesEvent indicates an expected call of HandlesEvent.
func (mr *MockGrpcWorkerMockRecorder) HandlesEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlesEvent", reflect.TypeOf((*MockGrpcWorker)(nil).HandlesEvent), arg0)
}

// HandlesHttpRequest mocks base method.
func (m *MockGrpcWorker) HandlesHttpRequest(arg0 *triggers.HttpRequest) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlesHttpRequest", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HandlesHttpRequest indicates an expected call of HandlesHttpRequest.
func (mr *MockGrpcWorkerMockRecorder) HandlesHttpRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlesHttpRequest", reflect.TypeOf((*MockGrpcWorker)(nil).HandlesHttpRequest), arg0)
}

// Listen mocks base method.
func (m *MockGrpcWorker) Listen(arg0 chan error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Listen", arg0)
}

// Listen indicates an expected call of Listen.
func (mr *MockGrpcWorkerMockRecorder) Listen(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockGrpcWorker)(nil).Listen), arg0)
}
