// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/pkg/worker (interfaces: Worker,Adapter)

// Package worker is a generated GoMock package.
package worker

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	triggers "github.com/nitrictech/nitric/pkg/triggers"
)

// MockWorker is a mock of Worker interface.
type MockWorker struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMockRecorder
}

// MockWorkerMockRecorder is the mock recorder for MockWorker.
type MockWorkerMockRecorder struct {
	mock *MockWorker
}

// NewMockWorker creates a new mock instance.
func NewMockWorker(ctrl *gomock.Controller) *MockWorker {
	mock := &MockWorker{ctrl: ctrl}
	mock.recorder = &MockWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorker) EXPECT() *MockWorkerMockRecorder {
	return m.recorder
}

// HandleEvent mocks base method.
func (m *MockWorker) HandleEvent(arg0 context.Context, arg1 *triggers.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleEvent indicates an expected call of HandleEvent.
func (mr *MockWorkerMockRecorder) HandleEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvent", reflect.TypeOf((*MockWorker)(nil).HandleEvent), arg0, arg1)
}

// HandleHttpRequest mocks base method.
func (m *MockWorker) HandleHttpRequest(arg0 context.Context, arg1 *triggers.HttpRequest) (*triggers.HttpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleHttpRequest", arg0, arg1)
	ret0, _ := ret[0].(*triggers.HttpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleHttpRequest indicates an expected call of HandleHttpRequest.
func (mr *MockWorkerMockRecorder) HandleHttpRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleHttpRequest", reflect.TypeOf((*MockWorker)(nil).HandleHttpRequest), arg0, arg1)
}

// HandlesEvent mocks base method.
func (m *MockWorker) HandlesEvent(arg0 *triggers.Event) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlesEvent", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HandlesEvent indicates an expected call of HandlesEvent.
func (mr *MockWorkerMockRecorder) HandlesEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlesEvent", reflect.TypeOf((*MockWorker)(nil).HandlesEvent), arg0)
}

// HandlesHttpRequest mocks base method.
func (m *MockWorker) HandlesHttpRequest(arg0 *triggers.HttpRequest) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlesHttpRequest", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HandlesHttpRequest indicates an expected call of HandlesHttpRequest.
func (mr *MockWorkerMockRecorder) HandlesHttpRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlesHttpRequest", reflect.TypeOf((*MockWorker)(nil).HandlesHttpRequest), arg0)
}

// MockAdapter is a mock of Adapter interface.
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter.
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance.
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// HandleEvent mocks base method.
func (m *MockAdapter) HandleEvent(arg0 context.Context, arg1 *triggers.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleEvent indicates an expected call of HandleEvent.
func (mr *MockAdapterMockRecorder) HandleEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvent", reflect.TypeOf((*MockAdapter)(nil).HandleEvent), arg0, arg1)
}

// HandleHttpRequest mocks base method.
func (m *MockAdapter) HandleHttpRequest(arg0 context.Context, arg1 *triggers.HttpRequest) (*triggers.HttpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleHttpRequest", arg0, arg1)
	ret0, _ := ret[0].(*triggers.HttpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleHttpRequest indicates an expected call of HandleHttpRequest.
func (mr *MockAdapterMockRecorder) HandleHttpRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleHttpRequest", reflect.TypeOf((*MockAdapter)(nil).HandleHttpRequest), arg0, arg1)
}
