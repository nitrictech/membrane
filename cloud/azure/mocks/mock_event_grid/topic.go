// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/azure-sdk-for-go/services/eventgrid/mgmt/2020-06-01/eventgrid/eventgridapi (interfaces: TopicsClientAPI)

// Package mock_eventgridapi is a generated GoMock package.
package mock_eventgridapi

import (
	context "context"
	reflect "reflect"

	eventgrid "github.com/Azure/azure-sdk-for-go/services/eventgrid/mgmt/2020-06-01/eventgrid"
	gomock "github.com/golang/mock/gomock"
)

// MockTopicsClientAPI is a mock of TopicsClientAPI interface.
type MockTopicsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTopicsClientAPIMockRecorder
}

// MockTopicsClientAPIMockRecorder is the mock recorder for MockTopicsClientAPI.
type MockTopicsClientAPIMockRecorder struct {
	mock *MockTopicsClientAPI
}

// NewMockTopicsClientAPI creates a new mock instance.
func NewMockTopicsClientAPI(ctrl *gomock.Controller) *MockTopicsClientAPI {
	mock := &MockTopicsClientAPI{ctrl: ctrl}
	mock.recorder = &MockTopicsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicsClientAPI) EXPECT() *MockTopicsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockTopicsClientAPI) CreateOrUpdate(arg0 context.Context, arg1, arg2 string, arg3 eventgrid.Topic) (eventgrid.TopicsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(eventgrid.TopicsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockTopicsClientAPIMockRecorder) CreateOrUpdate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockTopicsClientAPI)(nil).CreateOrUpdate), arg0, arg1, arg2, arg3)
}

// Delete mocks base method.
func (m *MockTopicsClientAPI) Delete(arg0 context.Context, arg1, arg2 string) (eventgrid.TopicsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(eventgrid.TopicsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockTopicsClientAPIMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTopicsClientAPI)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockTopicsClientAPI) Get(arg0 context.Context, arg1, arg2 string) (eventgrid.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(eventgrid.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTopicsClientAPIMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTopicsClientAPI)(nil).Get), arg0, arg1, arg2)
}

// ListByResourceGroup mocks base method.
func (m *MockTopicsClientAPI) ListByResourceGroup(arg0 context.Context, arg1, arg2 string, arg3 *int32) (eventgrid.TopicsListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(eventgrid.TopicsListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup.
func (mr *MockTopicsClientAPIMockRecorder) ListByResourceGroup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockTopicsClientAPI)(nil).ListByResourceGroup), arg0, arg1, arg2, arg3)
}

// ListByResourceGroupComplete mocks base method.
func (m *MockTopicsClientAPI) ListByResourceGroupComplete(arg0 context.Context, arg1, arg2 string, arg3 *int32) (eventgrid.TopicsListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(eventgrid.TopicsListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete.
func (mr *MockTopicsClientAPIMockRecorder) ListByResourceGroupComplete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockTopicsClientAPI)(nil).ListByResourceGroupComplete), arg0, arg1, arg2, arg3)
}

// ListBySubscription mocks base method.
func (m *MockTopicsClientAPI) ListBySubscription(arg0 context.Context, arg1 string, arg2 *int32) (eventgrid.TopicsListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscription", arg0, arg1, arg2)
	ret0, _ := ret[0].(eventgrid.TopicsListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscription indicates an expected call of ListBySubscription.
func (mr *MockTopicsClientAPIMockRecorder) ListBySubscription(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscription", reflect.TypeOf((*MockTopicsClientAPI)(nil).ListBySubscription), arg0, arg1, arg2)
}

// ListBySubscriptionComplete mocks base method.
func (m *MockTopicsClientAPI) ListBySubscriptionComplete(arg0 context.Context, arg1 string, arg2 *int32) (eventgrid.TopicsListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscriptionComplete", arg0, arg1, arg2)
	ret0, _ := ret[0].(eventgrid.TopicsListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscriptionComplete indicates an expected call of ListBySubscriptionComplete.
func (mr *MockTopicsClientAPIMockRecorder) ListBySubscriptionComplete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscriptionComplete", reflect.TypeOf((*MockTopicsClientAPI)(nil).ListBySubscriptionComplete), arg0, arg1, arg2)
}

// ListEventTypes mocks base method.
func (m *MockTopicsClientAPI) ListEventTypes(arg0 context.Context, arg1, arg2, arg3, arg4 string) (eventgrid.EventTypesListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventTypes", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(eventgrid.EventTypesListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventTypes indicates an expected call of ListEventTypes.
func (mr *MockTopicsClientAPIMockRecorder) ListEventTypes(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventTypes", reflect.TypeOf((*MockTopicsClientAPI)(nil).ListEventTypes), arg0, arg1, arg2, arg3, arg4)
}

// ListSharedAccessKeys mocks base method.
func (m *MockTopicsClientAPI) ListSharedAccessKeys(arg0 context.Context, arg1, arg2 string) (eventgrid.TopicSharedAccessKeys, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSharedAccessKeys", arg0, arg1, arg2)
	ret0, _ := ret[0].(eventgrid.TopicSharedAccessKeys)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSharedAccessKeys indicates an expected call of ListSharedAccessKeys.
func (mr *MockTopicsClientAPIMockRecorder) ListSharedAccessKeys(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSharedAccessKeys", reflect.TypeOf((*MockTopicsClientAPI)(nil).ListSharedAccessKeys), arg0, arg1, arg2)
}

// RegenerateKey mocks base method.
func (m *MockTopicsClientAPI) RegenerateKey(arg0 context.Context, arg1, arg2 string, arg3 eventgrid.TopicRegenerateKeyRequest) (eventgrid.TopicSharedAccessKeys, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegenerateKey", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(eventgrid.TopicSharedAccessKeys)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegenerateKey indicates an expected call of RegenerateKey.
func (mr *MockTopicsClientAPIMockRecorder) RegenerateKey(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegenerateKey", reflect.TypeOf((*MockTopicsClientAPI)(nil).RegenerateKey), arg0, arg1, arg2, arg3)
}

// Update mocks base method.
func (m *MockTopicsClientAPI) Update(arg0 context.Context, arg1, arg2 string, arg3 eventgrid.TopicUpdateParameters) (eventgrid.TopicsUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(eventgrid.TopicsUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTopicsClientAPIMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTopicsClientAPI)(nil).Update), arg0, arg1, arg2, arg3)
}
