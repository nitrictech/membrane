// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/cloud/azure/runtime/queue/iface (interfaces: AzqueueServiceUrlIface,AzqueueQueueUrlIface,AzqueueMessageUrlIface,DequeueMessagesResponseIface,AzqueueMessageIdUrlIface)

// Package mock_azqueue is a generated GoMock package.
package mock_azqueue

import (
	context "context"
	reflect "reflect"
	time "time"

	azqueue "github.com/Azure/azure-storage-queue-go/azqueue"
	gomock "github.com/golang/mock/gomock"
	iface "github.com/nitrictech/nitric/cloud/azure/runtime/queue/iface"
)

// MockAzqueueServiceUrlIface is a mock of AzqueueServiceUrlIface interface.
type MockAzqueueServiceUrlIface struct {
	ctrl     *gomock.Controller
	recorder *MockAzqueueServiceUrlIfaceMockRecorder
}

// MockAzqueueServiceUrlIfaceMockRecorder is the mock recorder for MockAzqueueServiceUrlIface.
type MockAzqueueServiceUrlIfaceMockRecorder struct {
	mock *MockAzqueueServiceUrlIface
}

// NewMockAzqueueServiceUrlIface creates a new mock instance.
func NewMockAzqueueServiceUrlIface(ctrl *gomock.Controller) *MockAzqueueServiceUrlIface {
	mock := &MockAzqueueServiceUrlIface{ctrl: ctrl}
	mock.recorder = &MockAzqueueServiceUrlIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzqueueServiceUrlIface) EXPECT() *MockAzqueueServiceUrlIfaceMockRecorder {
	return m.recorder
}

// NewQueueURL mocks base method.
func (m *MockAzqueueServiceUrlIface) NewQueueURL(arg0 string) iface.AzqueueQueueUrlIface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewQueueURL", arg0)
	ret0, _ := ret[0].(iface.AzqueueQueueUrlIface)
	return ret0
}

// NewQueueURL indicates an expected call of NewQueueURL.
func (mr *MockAzqueueServiceUrlIfaceMockRecorder) NewQueueURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewQueueURL", reflect.TypeOf((*MockAzqueueServiceUrlIface)(nil).NewQueueURL), arg0)
}

// MockAzqueueQueueUrlIface is a mock of AzqueueQueueUrlIface interface.
type MockAzqueueQueueUrlIface struct {
	ctrl     *gomock.Controller
	recorder *MockAzqueueQueueUrlIfaceMockRecorder
}

// MockAzqueueQueueUrlIfaceMockRecorder is the mock recorder for MockAzqueueQueueUrlIface.
type MockAzqueueQueueUrlIfaceMockRecorder struct {
	mock *MockAzqueueQueueUrlIface
}

// NewMockAzqueueQueueUrlIface creates a new mock instance.
func NewMockAzqueueQueueUrlIface(ctrl *gomock.Controller) *MockAzqueueQueueUrlIface {
	mock := &MockAzqueueQueueUrlIface{ctrl: ctrl}
	mock.recorder = &MockAzqueueQueueUrlIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzqueueQueueUrlIface) EXPECT() *MockAzqueueQueueUrlIfaceMockRecorder {
	return m.recorder
}

// NewMessageURL mocks base method.
func (m *MockAzqueueQueueUrlIface) NewMessageURL() iface.AzqueueMessageUrlIface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMessageURL")
	ret0, _ := ret[0].(iface.AzqueueMessageUrlIface)
	return ret0
}

// NewMessageURL indicates an expected call of NewMessageURL.
func (mr *MockAzqueueQueueUrlIfaceMockRecorder) NewMessageURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMessageURL", reflect.TypeOf((*MockAzqueueQueueUrlIface)(nil).NewMessageURL))
}

// MockAzqueueMessageUrlIface is a mock of AzqueueMessageUrlIface interface.
type MockAzqueueMessageUrlIface struct {
	ctrl     *gomock.Controller
	recorder *MockAzqueueMessageUrlIfaceMockRecorder
}

// MockAzqueueMessageUrlIfaceMockRecorder is the mock recorder for MockAzqueueMessageUrlIface.
type MockAzqueueMessageUrlIfaceMockRecorder struct {
	mock *MockAzqueueMessageUrlIface
}

// NewMockAzqueueMessageUrlIface creates a new mock instance.
func NewMockAzqueueMessageUrlIface(ctrl *gomock.Controller) *MockAzqueueMessageUrlIface {
	mock := &MockAzqueueMessageUrlIface{ctrl: ctrl}
	mock.recorder = &MockAzqueueMessageUrlIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzqueueMessageUrlIface) EXPECT() *MockAzqueueMessageUrlIfaceMockRecorder {
	return m.recorder
}

// Dequeue mocks base method.
func (m *MockAzqueueMessageUrlIface) Dequeue(arg0 context.Context, arg1 int32, arg2 time.Duration) (iface.DequeueMessagesResponseIface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dequeue", arg0, arg1, arg2)
	ret0, _ := ret[0].(iface.DequeueMessagesResponseIface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dequeue indicates an expected call of Dequeue.
func (mr *MockAzqueueMessageUrlIfaceMockRecorder) Dequeue(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dequeue", reflect.TypeOf((*MockAzqueueMessageUrlIface)(nil).Dequeue), arg0, arg1, arg2)
}

// Enqueue mocks base method.
func (m *MockAzqueueMessageUrlIface) Enqueue(arg0 context.Context, arg1 string, arg2, arg3 time.Duration) (*azqueue.EnqueueMessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*azqueue.EnqueueMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockAzqueueMessageUrlIfaceMockRecorder) Enqueue(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockAzqueueMessageUrlIface)(nil).Enqueue), arg0, arg1, arg2, arg3)
}

// NewMessageIDURL mocks base method.
func (m *MockAzqueueMessageUrlIface) NewMessageIDURL(arg0 azqueue.MessageID) iface.AzqueueMessageIdUrlIface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMessageIDURL", arg0)
	ret0, _ := ret[0].(iface.AzqueueMessageIdUrlIface)
	return ret0
}

// NewMessageIDURL indicates an expected call of NewMessageIDURL.
func (mr *MockAzqueueMessageUrlIfaceMockRecorder) NewMessageIDURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMessageIDURL", reflect.TypeOf((*MockAzqueueMessageUrlIface)(nil).NewMessageIDURL), arg0)
}

// MockDequeueMessagesResponseIface is a mock of DequeueMessagesResponseIface interface.
type MockDequeueMessagesResponseIface struct {
	ctrl     *gomock.Controller
	recorder *MockDequeueMessagesResponseIfaceMockRecorder
}

// MockDequeueMessagesResponseIfaceMockRecorder is the mock recorder for MockDequeueMessagesResponseIface.
type MockDequeueMessagesResponseIfaceMockRecorder struct {
	mock *MockDequeueMessagesResponseIface
}

// NewMockDequeueMessagesResponseIface creates a new mock instance.
func NewMockDequeueMessagesResponseIface(ctrl *gomock.Controller) *MockDequeueMessagesResponseIface {
	mock := &MockDequeueMessagesResponseIface{ctrl: ctrl}
	mock.recorder = &MockDequeueMessagesResponseIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDequeueMessagesResponseIface) EXPECT() *MockDequeueMessagesResponseIfaceMockRecorder {
	return m.recorder
}

// Message mocks base method.
func (m *MockDequeueMessagesResponseIface) Message(arg0 int32) *azqueue.DequeuedMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Message", arg0)
	ret0, _ := ret[0].(*azqueue.DequeuedMessage)
	return ret0
}

// Message indicates an expected call of Message.
func (mr *MockDequeueMessagesResponseIfaceMockRecorder) Message(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockDequeueMessagesResponseIface)(nil).Message), arg0)
}

// NumMessages mocks base method.
func (m *MockDequeueMessagesResponseIface) NumMessages() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumMessages")
	ret0, _ := ret[0].(int32)
	return ret0
}

// NumMessages indicates an expected call of NumMessages.
func (mr *MockDequeueMessagesResponseIfaceMockRecorder) NumMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumMessages", reflect.TypeOf((*MockDequeueMessagesResponseIface)(nil).NumMessages))
}

// MockAzqueueMessageIdUrlIface is a mock of AzqueueMessageIdUrlIface interface.
type MockAzqueueMessageIdUrlIface struct {
	ctrl     *gomock.Controller
	recorder *MockAzqueueMessageIdUrlIfaceMockRecorder
}

// MockAzqueueMessageIdUrlIfaceMockRecorder is the mock recorder for MockAzqueueMessageIdUrlIface.
type MockAzqueueMessageIdUrlIfaceMockRecorder struct {
	mock *MockAzqueueMessageIdUrlIface
}

// NewMockAzqueueMessageIdUrlIface creates a new mock instance.
func NewMockAzqueueMessageIdUrlIface(ctrl *gomock.Controller) *MockAzqueueMessageIdUrlIface {
	mock := &MockAzqueueMessageIdUrlIface{ctrl: ctrl}
	mock.recorder = &MockAzqueueMessageIdUrlIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzqueueMessageIdUrlIface) EXPECT() *MockAzqueueMessageIdUrlIfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAzqueueMessageIdUrlIface) Delete(arg0 context.Context, arg1 azqueue.PopReceipt) (*azqueue.MessageIDDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*azqueue.MessageIDDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAzqueueMessageIdUrlIfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAzqueueMessageIdUrlIface)(nil).Delete), arg0, arg1)
}
