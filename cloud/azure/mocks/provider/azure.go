// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/cloud/azure/runtime/resource (interfaces: AzResourceResolver)

// Package mock_resource is a generated GoMock package.
package mock_resource

import (
	context "context"
	reflect "reflect"

	adal "github.com/Azure/go-autorest/autorest/adal"
	gomock "github.com/golang/mock/gomock"
	resource "github.com/nitrictech/nitric/cloud/azure/runtime/resource"
)

// MockAzResourceResolver is a mock of AzResourceResolver interface.
type MockAzResourceResolver struct {
	ctrl     *gomock.Controller
	recorder *MockAzResourceResolverMockRecorder
}

// MockAzResourceResolverMockRecorder is the mock recorder for MockAzResourceResolver.
type MockAzResourceResolverMockRecorder struct {
	mock *MockAzResourceResolver
}

// NewMockAzResourceResolver creates a new mock instance.
func NewMockAzResourceResolver(ctrl *gomock.Controller) *MockAzResourceResolver {
	mock := &MockAzResourceResolver{ctrl: ctrl}
	mock.recorder = &MockAzResourceResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzResourceResolver) EXPECT() *MockAzResourceResolverMockRecorder {
	return m.recorder
}

// GetApiDetails mocks base method.
func (m *MockAzResourceResolver) GetApiDetails(arg0 context.Context, arg1 string) (*resource.AzureApiMgmtDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiDetails", arg0, arg1)
	ret0, _ := ret[0].(*resource.AzureApiMgmtDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiDetails indicates an expected call of GetApiDetails.
func (mr *MockAzResourceResolverMockRecorder) GetApiDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiDetails", reflect.TypeOf((*MockAzResourceResolver)(nil).GetApiDetails), arg0, arg1)
}

// GetResources mocks base method.
func (m *MockAzResourceResolver) GetResources(arg0 context.Context, arg1 string) (map[string]resource.AzGenericResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResources", arg0, arg1)
	ret0, _ := ret[0].(map[string]resource.AzGenericResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResources indicates an expected call of GetResources.
func (mr *MockAzResourceResolverMockRecorder) GetResources(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResources", reflect.TypeOf((*MockAzResourceResolver)(nil).GetResources), arg0, arg1)
}

// ResourceGroupName mocks base method.
func (m *MockAzResourceResolver) ResourceGroupName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceGroupName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ResourceGroupName indicates an expected call of ResourceGroupName.
func (mr *MockAzResourceResolverMockRecorder) ResourceGroupName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceGroupName", reflect.TypeOf((*MockAzResourceResolver)(nil).ResourceGroupName))
}

// ServicePrincipalToken mocks base method.
func (m *MockAzResourceResolver) ServicePrincipalToken(arg0 string) (*adal.ServicePrincipalToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePrincipalToken", arg0)
	ret0, _ := ret[0].(*adal.ServicePrincipalToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePrincipalToken indicates an expected call of ServicePrincipalToken.
func (mr *MockAzResourceResolverMockRecorder) ServicePrincipalToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePrincipalToken", reflect.TypeOf((*MockAzResourceResolver)(nil).ServicePrincipalToken), arg0)
}

// SubscriptionId mocks base method.
func (m *MockAzResourceResolver) SubscriptionId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscriptionId")
	ret0, _ := ret[0].(string)
	return ret0
}

// SubscriptionId indicates an expected call of SubscriptionId.
func (mr *MockAzResourceResolverMockRecorder) SubscriptionId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscriptionId", reflect.TypeOf((*MockAzResourceResolver)(nil).SubscriptionId))
}
