// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/cloud/gcp/runtime/resource (interfaces: GcpResourceResolver)

// Package mock_resource is a generated GoMock package.
package mock_resource

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	resource "github.com/nitrictech/nitric/cloud/gcp/runtime/resource"
)

// MockGcpResourceResolver is a mock of GcpResourceResolver interface.
type MockGcpResourceResolver struct {
	ctrl     *gomock.Controller
	recorder *MockGcpResourceResolverMockRecorder
}

// MockGcpResourceResolverMockRecorder is the mock recorder for MockGcpResourceResolver.
type MockGcpResourceResolverMockRecorder struct {
	mock *MockGcpResourceResolver
}

// NewMockGcpResourceResolver creates a new mock instance.
func NewMockGcpResourceResolver(ctrl *gomock.Controller) *MockGcpResourceResolver {
	mock := &MockGcpResourceResolver{ctrl: ctrl}
	mock.recorder = &MockGcpResourceResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGcpResourceResolver) EXPECT() *MockGcpResourceResolverMockRecorder {
	return m.recorder
}

// GetApiGatewayDetails mocks base method.
func (m *MockGcpResourceResolver) GetApiGatewayDetails(arg0 context.Context, arg1 string) (*resource.GcpApiGatewayDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiGatewayDetails", arg0, arg1)
	ret0, _ := ret[0].(*resource.GcpApiGatewayDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiGatewayDetails indicates an expected call of GetApiGatewayDetails.
func (mr *MockGcpResourceResolverMockRecorder) GetApiGatewayDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiGatewayDetails", reflect.TypeOf((*MockGcpResourceResolver)(nil).GetApiGatewayDetails), arg0, arg1)
}

// GetProjectID mocks base method.
func (m *MockGcpResourceResolver) GetProjectID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectID indicates an expected call of GetProjectID.
func (mr *MockGcpResourceResolverMockRecorder) GetProjectID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectID", reflect.TypeOf((*MockGcpResourceResolver)(nil).GetProjectID))
}

// GetServiceAccountEmail mocks base method.
func (m *MockGcpResourceResolver) GetServiceAccountEmail() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccountEmail")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountEmail indicates an expected call of GetServiceAccountEmail.
func (mr *MockGcpResourceResolverMockRecorder) GetServiceAccountEmail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountEmail", reflect.TypeOf((*MockGcpResourceResolver)(nil).GetServiceAccountEmail))
}
