// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: faas/v1/faas.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ClientMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClientMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClientMessageMultiError, or
// nil if none found.
func (m *ClientMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	switch m.Content.(type) {

	case *ClientMessage_InitRequest:

		if all {
			switch v := interface{}(m.GetInitRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClientMessageValidationError{
						field:  "InitRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClientMessageValidationError{
						field:  "InitRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInitRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClientMessageValidationError{
					field:  "InitRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ClientMessage_TriggerResponse:

		if all {
			switch v := interface{}(m.GetTriggerResponse()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClientMessageValidationError{
						field:  "TriggerResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClientMessageValidationError{
						field:  "TriggerResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTriggerResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClientMessageValidationError{
					field:  "TriggerResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ClientMessageMultiError(errors)
	}

	return nil
}

// ClientMessageMultiError is an error wrapping multiple validation errors
// returned by ClientMessage.ValidateAll() if the designated constraints
// aren't met.
type ClientMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientMessageMultiError) AllErrors() []error { return m }

// ClientMessageValidationError is the validation error returned by
// ClientMessage.Validate if the designated constraints aren't met.
type ClientMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientMessageValidationError) ErrorName() string { return "ClientMessageValidationError" }

// Error satisfies the builtin error interface
func (e ClientMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientMessageValidationError{}

// Validate checks the field values on ServerMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerMessageMultiError, or
// nil if none found.
func (m *ServerMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	switch m.Content.(type) {

	case *ServerMessage_InitResponse:

		if all {
			switch v := interface{}(m.GetInitResponse()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "InitResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "InitResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInitResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "InitResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_TriggerRequest:

		if all {
			switch v := interface{}(m.GetTriggerRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "TriggerRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "TriggerRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTriggerRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "TriggerRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServerMessageMultiError(errors)
	}

	return nil
}

// ServerMessageMultiError is an error wrapping multiple validation errors
// returned by ServerMessage.ValidateAll() if the designated constraints
// aren't met.
type ServerMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerMessageMultiError) AllErrors() []error { return m }

// ServerMessageValidationError is the validation error returned by
// ServerMessage.Validate if the designated constraints aren't met.
type ServerMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerMessageValidationError) ErrorName() string { return "ServerMessageValidationError" }

// Error satisfies the builtin error interface
func (e ServerMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerMessageValidationError{}

// Validate checks the field values on ApiWorker with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiWorker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiWorker with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApiWorkerMultiError, or nil
// if none found.
func (m *ApiWorker) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiWorker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Api

	// no validation rules for Path

	if len(errors) > 0 {
		return ApiWorkerMultiError(errors)
	}

	return nil
}

// ApiWorkerMultiError is an error wrapping multiple validation errors returned
// by ApiWorker.ValidateAll() if the designated constraints aren't met.
type ApiWorkerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiWorkerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiWorkerMultiError) AllErrors() []error { return m }

// ApiWorkerValidationError is the validation error returned by
// ApiWorker.Validate if the designated constraints aren't met.
type ApiWorkerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiWorkerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiWorkerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiWorkerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiWorkerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiWorkerValidationError) ErrorName() string { return "ApiWorkerValidationError" }

// Error satisfies the builtin error interface
func (e ApiWorkerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiWorker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiWorkerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiWorkerValidationError{}

// Validate checks the field values on SubscriptionWorker with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscriptionWorker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscriptionWorker with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscriptionWorkerMultiError, or nil if none found.
func (m *SubscriptionWorker) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscriptionWorker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Topic

	if len(errors) > 0 {
		return SubscriptionWorkerMultiError(errors)
	}

	return nil
}

// SubscriptionWorkerMultiError is an error wrapping multiple validation errors
// returned by SubscriptionWorker.ValidateAll() if the designated constraints
// aren't met.
type SubscriptionWorkerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscriptionWorkerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscriptionWorkerMultiError) AllErrors() []error { return m }

// SubscriptionWorkerValidationError is the validation error returned by
// SubscriptionWorker.Validate if the designated constraints aren't met.
type SubscriptionWorkerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscriptionWorkerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscriptionWorkerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscriptionWorkerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscriptionWorkerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscriptionWorkerValidationError) ErrorName() string {
	return "SubscriptionWorkerValidationError"
}

// Error satisfies the builtin error interface
func (e SubscriptionWorkerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscriptionWorker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscriptionWorkerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscriptionWorkerValidationError{}

// Validate checks the field values on ScheduleWorker with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScheduleWorker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleWorker with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScheduleWorkerMultiError,
// or nil if none found.
func (m *ScheduleWorker) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleWorker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	switch m.Cadence.(type) {

	case *ScheduleWorker_Rate:

		if all {
			switch v := interface{}(m.GetRate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScheduleWorkerValidationError{
						field:  "Rate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScheduleWorkerValidationError{
						field:  "Rate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScheduleWorkerValidationError{
					field:  "Rate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ScheduleWorker_Cron:

		if all {
			switch v := interface{}(m.GetCron()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScheduleWorkerValidationError{
						field:  "Cron",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScheduleWorkerValidationError{
						field:  "Cron",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCron()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScheduleWorkerValidationError{
					field:  "Cron",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ScheduleWorkerMultiError(errors)
	}

	return nil
}

// ScheduleWorkerMultiError is an error wrapping multiple validation errors
// returned by ScheduleWorker.ValidateAll() if the designated constraints
// aren't met.
type ScheduleWorkerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleWorkerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleWorkerMultiError) AllErrors() []error { return m }

// ScheduleWorkerValidationError is the validation error returned by
// ScheduleWorker.Validate if the designated constraints aren't met.
type ScheduleWorkerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleWorkerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleWorkerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleWorkerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleWorkerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleWorkerValidationError) ErrorName() string { return "ScheduleWorkerValidationError" }

// Error satisfies the builtin error interface
func (e ScheduleWorkerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleWorker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleWorkerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleWorkerValidationError{}

// Validate checks the field values on ScheduleRate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScheduleRate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleRate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScheduleRateMultiError, or
// nil if none found.
func (m *ScheduleRate) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleRate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rate

	if len(errors) > 0 {
		return ScheduleRateMultiError(errors)
	}

	return nil
}

// ScheduleRateMultiError is an error wrapping multiple validation errors
// returned by ScheduleRate.ValidateAll() if the designated constraints aren't met.
type ScheduleRateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleRateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleRateMultiError) AllErrors() []error { return m }

// ScheduleRateValidationError is the validation error returned by
// ScheduleRate.Validate if the designated constraints aren't met.
type ScheduleRateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleRateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleRateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleRateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleRateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleRateValidationError) ErrorName() string { return "ScheduleRateValidationError" }

// Error satisfies the builtin error interface
func (e ScheduleRateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleRate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleRateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleRateValidationError{}

// Validate checks the field values on ScheduleCron with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScheduleCron) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleCron with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScheduleCronMultiError, or
// nil if none found.
func (m *ScheduleCron) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleCron) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cron

	if len(errors) > 0 {
		return ScheduleCronMultiError(errors)
	}

	return nil
}

// ScheduleCronMultiError is an error wrapping multiple validation errors
// returned by ScheduleCron.ValidateAll() if the designated constraints aren't met.
type ScheduleCronMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleCronMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleCronMultiError) AllErrors() []error { return m }

// ScheduleCronValidationError is the validation error returned by
// ScheduleCron.Validate if the designated constraints aren't met.
type ScheduleCronValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleCronValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleCronValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleCronValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleCronValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleCronValidationError) ErrorName() string { return "ScheduleCronValidationError" }

// Error satisfies the builtin error interface
func (e ScheduleCronValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleCron.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleCronValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleCronValidationError{}

// Validate checks the field values on InitRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InitRequestMultiError, or
// nil if none found.
func (m *InitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Worker.(type) {

	case *InitRequest_Api:

		if all {
			switch v := interface{}(m.GetApi()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitRequestValidationError{
						field:  "Api",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitRequestValidationError{
						field:  "Api",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetApi()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitRequestValidationError{
					field:  "Api",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitRequest_Subscription:

		if all {
			switch v := interface{}(m.GetSubscription()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitRequestValidationError{
						field:  "Subscription",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitRequestValidationError{
						field:  "Subscription",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSubscription()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitRequestValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InitRequest_Schedule:

		if all {
			switch v := interface{}(m.GetSchedule()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitRequestValidationError{
						field:  "Schedule",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitRequestValidationError{
						field:  "Schedule",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSchedule()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitRequestValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InitRequestMultiError(errors)
	}

	return nil
}

// InitRequestMultiError is an error wrapping multiple validation errors
// returned by InitRequest.ValidateAll() if the designated constraints aren't met.
type InitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitRequestMultiError) AllErrors() []error { return m }

// InitRequestValidationError is the validation error returned by
// InitRequest.Validate if the designated constraints aren't met.
type InitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitRequestValidationError) ErrorName() string { return "InitRequestValidationError" }

// Error satisfies the builtin error interface
func (e InitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitRequestValidationError{}

// Validate checks the field values on InitResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InitResponseMultiError, or
// nil if none found.
func (m *InitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InitResponseMultiError(errors)
	}

	return nil
}

// InitResponseMultiError is an error wrapping multiple validation errors
// returned by InitResponse.ValidateAll() if the designated constraints aren't met.
type InitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitResponseMultiError) AllErrors() []error { return m }

// InitResponseValidationError is the validation error returned by
// InitResponse.Validate if the designated constraints aren't met.
type InitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitResponseValidationError) ErrorName() string { return "InitResponseValidationError" }

// Error satisfies the builtin error interface
func (e InitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitResponseValidationError{}

// Validate checks the field values on TriggerRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TriggerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TriggerRequestMultiError,
// or nil if none found.
func (m *TriggerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	// no validation rules for MimeType

	switch m.Context.(type) {

	case *TriggerRequest_Http:

		if all {
			switch v := interface{}(m.GetHttp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerRequestValidationError{
						field:  "Http",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerRequestValidationError{
						field:  "Http",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHttp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerRequestValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TriggerRequest_Topic:

		if all {
			switch v := interface{}(m.GetTopic()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerRequestValidationError{
						field:  "Topic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerRequestValidationError{
						field:  "Topic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTopic()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerRequestValidationError{
					field:  "Topic",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TriggerRequest_CloudEvent:

		if all {
			switch v := interface{}(m.GetCloudEvent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerRequestValidationError{
						field:  "CloudEvent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerRequestValidationError{
						field:  "CloudEvent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCloudEvent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerRequestValidationError{
					field:  "CloudEvent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerRequestMultiError(errors)
	}

	return nil
}

// TriggerRequestMultiError is an error wrapping multiple validation errors
// returned by TriggerRequest.ValidateAll() if the designated constraints
// aren't met.
type TriggerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerRequestMultiError) AllErrors() []error { return m }

// TriggerRequestValidationError is the validation error returned by
// TriggerRequest.Validate if the designated constraints aren't met.
type TriggerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerRequestValidationError) ErrorName() string { return "TriggerRequestValidationError" }

// Error satisfies the builtin error interface
func (e TriggerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerRequestValidationError{}

// Validate checks the field values on HeaderValue with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HeaderValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HeaderValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HeaderValueMultiError, or
// nil if none found.
func (m *HeaderValue) ValidateAll() error {
	return m.validate(true)
}

func (m *HeaderValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HeaderValueMultiError(errors)
	}

	return nil
}

// HeaderValueMultiError is an error wrapping multiple validation errors
// returned by HeaderValue.ValidateAll() if the designated constraints aren't met.
type HeaderValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeaderValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeaderValueMultiError) AllErrors() []error { return m }

// HeaderValueValidationError is the validation error returned by
// HeaderValue.Validate if the designated constraints aren't met.
type HeaderValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeaderValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeaderValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeaderValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeaderValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeaderValueValidationError) ErrorName() string { return "HeaderValueValidationError" }

// Error satisfies the builtin error interface
func (e HeaderValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeaderValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeaderValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeaderValueValidationError{}

// Validate checks the field values on QueryValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryValueMultiError, or
// nil if none found.
func (m *QueryValue) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryValueMultiError(errors)
	}

	return nil
}

// QueryValueMultiError is an error wrapping multiple validation errors
// returned by QueryValue.ValidateAll() if the designated constraints aren't met.
type QueryValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryValueMultiError) AllErrors() []error { return m }

// QueryValueValidationError is the validation error returned by
// QueryValue.Validate if the designated constraints aren't met.
type QueryValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryValueValidationError) ErrorName() string { return "QueryValueValidationError" }

// Error satisfies the builtin error interface
func (e QueryValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryValueValidationError{}

// Validate checks the field values on HttpTriggerContext with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HttpTriggerContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HttpTriggerContext with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HttpTriggerContextMultiError, or nil if none found.
func (m *HttpTriggerContext) ValidateAll() error {
	return m.validate(true)
}

func (m *HttpTriggerContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Method

	// no validation rules for Path

	// no validation rules for HeadersOld

	// no validation rules for QueryParamsOld

	{
		sorted_keys := make([]string, len(m.GetHeaders()))
		i := 0
		for key := range m.GetHeaders() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetHeaders()[key]
			_ = val

			// no validation rules for Headers[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, HttpTriggerContextValidationError{
							field:  fmt.Sprintf("Headers[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, HttpTriggerContextValidationError{
							field:  fmt.Sprintf("Headers[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return HttpTriggerContextValidationError{
						field:  fmt.Sprintf("Headers[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetQueryParams()))
		i := 0
		for key := range m.GetQueryParams() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetQueryParams()[key]
			_ = val

			// no validation rules for QueryParams[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, HttpTriggerContextValidationError{
							field:  fmt.Sprintf("QueryParams[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, HttpTriggerContextValidationError{
							field:  fmt.Sprintf("QueryParams[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return HttpTriggerContextValidationError{
						field:  fmt.Sprintf("QueryParams[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for PathParams

	if len(errors) > 0 {
		return HttpTriggerContextMultiError(errors)
	}

	return nil
}

// HttpTriggerContextMultiError is an error wrapping multiple validation errors
// returned by HttpTriggerContext.ValidateAll() if the designated constraints
// aren't met.
type HttpTriggerContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HttpTriggerContextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HttpTriggerContextMultiError) AllErrors() []error { return m }

// HttpTriggerContextValidationError is the validation error returned by
// HttpTriggerContext.Validate if the designated constraints aren't met.
type HttpTriggerContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpTriggerContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpTriggerContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpTriggerContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpTriggerContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpTriggerContextValidationError) ErrorName() string {
	return "HttpTriggerContextValidationError"
}

// Error satisfies the builtin error interface
func (e HttpTriggerContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpTriggerContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpTriggerContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpTriggerContextValidationError{}

// Validate checks the field values on TopicTriggerContext with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TopicTriggerContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopicTriggerContext with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TopicTriggerContextMultiError, or nil if none found.
func (m *TopicTriggerContext) ValidateAll() error {
	return m.validate(true)
}

func (m *TopicTriggerContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Topic

	if len(errors) > 0 {
		return TopicTriggerContextMultiError(errors)
	}

	return nil
}

// TopicTriggerContextMultiError is an error wrapping multiple validation
// errors returned by TopicTriggerContext.ValidateAll() if the designated
// constraints aren't met.
type TopicTriggerContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopicTriggerContextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopicTriggerContextMultiError) AllErrors() []error { return m }

// TopicTriggerContextValidationError is the validation error returned by
// TopicTriggerContext.Validate if the designated constraints aren't met.
type TopicTriggerContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopicTriggerContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopicTriggerContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopicTriggerContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopicTriggerContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopicTriggerContextValidationError) ErrorName() string {
	return "TopicTriggerContextValidationError"
}

// Error satisfies the builtin error interface
func (e TopicTriggerContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopicTriggerContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopicTriggerContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopicTriggerContextValidationError{}

// Validate checks the field values on CloudEventContext with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CloudEventContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudEventContext with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudEventContextMultiError, or nil if none found.
func (m *CloudEventContext) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudEventContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudEventContextValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudEventContextValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudEventContextValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CloudEventContextMultiError(errors)
	}

	return nil
}

// CloudEventContextMultiError is an error wrapping multiple validation errors
// returned by CloudEventContext.ValidateAll() if the designated constraints
// aren't met.
type CloudEventContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudEventContextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudEventContextMultiError) AllErrors() []error { return m }

// CloudEventContextValidationError is the validation error returned by
// CloudEventContext.Validate if the designated constraints aren't met.
type CloudEventContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudEventContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudEventContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudEventContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudEventContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudEventContextValidationError) ErrorName() string {
	return "CloudEventContextValidationError"
}

// Error satisfies the builtin error interface
func (e CloudEventContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudEventContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudEventContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudEventContextValidationError{}

// Validate checks the field values on TriggerResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TriggerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerResponseMultiError, or nil if none found.
func (m *TriggerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	switch m.Context.(type) {

	case *TriggerResponse_Http:

		if all {
			switch v := interface{}(m.GetHttp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerResponseValidationError{
						field:  "Http",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerResponseValidationError{
						field:  "Http",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHttp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerResponseValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TriggerResponse_Topic:

		if all {
			switch v := interface{}(m.GetTopic()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerResponseValidationError{
						field:  "Topic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerResponseValidationError{
						field:  "Topic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTopic()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerResponseValidationError{
					field:  "Topic",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TriggerResponse_CloudEvent:

		if all {
			switch v := interface{}(m.GetCloudEvent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerResponseValidationError{
						field:  "CloudEvent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerResponseValidationError{
						field:  "CloudEvent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCloudEvent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerResponseValidationError{
					field:  "CloudEvent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerResponseMultiError(errors)
	}

	return nil
}

// TriggerResponseMultiError is an error wrapping multiple validation errors
// returned by TriggerResponse.ValidateAll() if the designated constraints
// aren't met.
type TriggerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerResponseMultiError) AllErrors() []error { return m }

// TriggerResponseValidationError is the validation error returned by
// TriggerResponse.Validate if the designated constraints aren't met.
type TriggerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerResponseValidationError) ErrorName() string { return "TriggerResponseValidationError" }

// Error satisfies the builtin error interface
func (e TriggerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerResponseValidationError{}

// Validate checks the field values on HttpResponseContext with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HttpResponseContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HttpResponseContext with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HttpResponseContextMultiError, or nil if none found.
func (m *HttpResponseContext) ValidateAll() error {
	return m.validate(true)
}

func (m *HttpResponseContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HeadersOld

	// no validation rules for Status

	{
		sorted_keys := make([]string, len(m.GetHeaders()))
		i := 0
		for key := range m.GetHeaders() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetHeaders()[key]
			_ = val

			// no validation rules for Headers[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, HttpResponseContextValidationError{
							field:  fmt.Sprintf("Headers[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, HttpResponseContextValidationError{
							field:  fmt.Sprintf("Headers[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return HttpResponseContextValidationError{
						field:  fmt.Sprintf("Headers[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return HttpResponseContextMultiError(errors)
	}

	return nil
}

// HttpResponseContextMultiError is an error wrapping multiple validation
// errors returned by HttpResponseContext.ValidateAll() if the designated
// constraints aren't met.
type HttpResponseContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HttpResponseContextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HttpResponseContextMultiError) AllErrors() []error { return m }

// HttpResponseContextValidationError is the validation error returned by
// HttpResponseContext.Validate if the designated constraints aren't met.
type HttpResponseContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpResponseContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpResponseContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpResponseContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpResponseContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpResponseContextValidationError) ErrorName() string {
	return "HttpResponseContextValidationError"
}

// Error satisfies the builtin error interface
func (e HttpResponseContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpResponseContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpResponseContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpResponseContextValidationError{}

// Validate checks the field values on TopicResponseContext with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TopicResponseContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopicResponseContext with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TopicResponseContextMultiError, or nil if none found.
func (m *TopicResponseContext) ValidateAll() error {
	return m.validate(true)
}

func (m *TopicResponseContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return TopicResponseContextMultiError(errors)
	}

	return nil
}

// TopicResponseContextMultiError is an error wrapping multiple validation
// errors returned by TopicResponseContext.ValidateAll() if the designated
// constraints aren't met.
type TopicResponseContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopicResponseContextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopicResponseContextMultiError) AllErrors() []error { return m }

// TopicResponseContextValidationError is the validation error returned by
// TopicResponseContext.Validate if the designated constraints aren't met.
type TopicResponseContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopicResponseContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopicResponseContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopicResponseContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopicResponseContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopicResponseContextValidationError) ErrorName() string {
	return "TopicResponseContextValidationError"
}

// Error satisfies the builtin error interface
func (e TopicResponseContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopicResponseContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopicResponseContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopicResponseContextValidationError{}

// Validate checks the field values on CloudEventResponseContext with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudEventResponseContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudEventResponseContext with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudEventResponseContextMultiError, or nil if none found.
func (m *CloudEventResponseContext) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudEventResponseContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return CloudEventResponseContextMultiError(errors)
	}

	return nil
}

// CloudEventResponseContextMultiError is an error wrapping multiple validation
// errors returned by CloudEventResponseContext.ValidateAll() if the
// designated constraints aren't met.
type CloudEventResponseContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudEventResponseContextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudEventResponseContextMultiError) AllErrors() []error { return m }

// CloudEventResponseContextValidationError is the validation error returned by
// CloudEventResponseContext.Validate if the designated constraints aren't met.
type CloudEventResponseContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudEventResponseContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudEventResponseContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudEventResponseContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudEventResponseContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudEventResponseContextValidationError) ErrorName() string {
	return "CloudEventResponseContextValidationError"
}

// Error satisfies the builtin error interface
func (e CloudEventResponseContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudEventResponseContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudEventResponseContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudEventResponseContextValidationError{}
